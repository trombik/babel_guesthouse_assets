---
name: Create localized video files from the original and deploy video files to S3 for review
on: [pull_request]
jobs:
  check_changed_files:
    name: See if change has been made on video files
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.changed_files.outputs.result }}
    steps:
      - name: Get a list of modified files
        uses: trilom/file-changes-action@v1.2.3
        id: file_changes
        with:
          output: " "
      - name: See if video file is modified
        id: changed_files
        run: |
          # collect all the modified files
          CHANGED_FILES="${{ steps.file_changes.outputs.files_added }}"
          #"
          CHANGED_FILES="${CHANGED_FILES} ${{ steps.file_changes.outputs.files_modified }}"
          #"

          # set the output to true if files include any files under `video`
          for F in ${CHANGED_FILES}; do
            first_dir=`echo ${F} | cut -d'/' -f1`
            if [ $first_dir == "video" ]; then
              echo "::set-output name=result::true"
            fi
          done
  deploy_to_s3:
    name: Deploy video files to S3
    needs: check_changed_files
    runs-on: ubuntu-latest
    steps:
      - name: See needs.check_changed_files.outputs.result
        run: |
          echo "${{ needs.check_changed_files.outputs.result }}"
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install
        # FreeBSD make to run Makefile
        # ffmpeg to burn subtitiles to the original file
        run: sudo apt-get install freebsd-buildutils ffmpeg

      - name: Get a list of modified files
        uses: trilom/file-changes-action@v1.2.3
        id: file_changes
        with:
          output: " "

      - name: Build modified video files
        run: |
          CHANGED_FILES="${{ steps.file_changes.outputs.files_added }}"
          #"
          CHANGED_FILES="${CHANGED_FILES} ${{ steps.file_changes.outputs.files_modified }}"
          #"

          # build video files
          for F in ${CHANGED_FILES}; do
            DIR=`dirname ${F}`
            FIRST_DIR=`echo ${DIR} | cut -d'/' -f1`
            # if it is not `video` directory, skip it
            if [ "${FIRST_DIR}" != "video" ]; then
              continue
            fi
            # if the change is NOT subdirectory, skip it
            if [ "${DIR}" == "video" ]; then
              continue
            fi
            fmake -C "${DIR}" -m .../Mk all
          done

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # SIN
          aws-region: ap-southeast-1

      - name: Create S3 bucket for the PR and upload the files
        id: upload_s3
        run: |
          # create the bucket
          BUCKET_NAME=`echo "${{ github.repository_owner }}-${{ github.repository }}-${{ github.event.pull_request.number }}" | sed -e 's/[^a-zA-Z0-9\-]/-/g'`
          # create policy file
          cat <<__EOF__ | tee policy.json
          {
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": "${{ secrets.S3_DEPLOY_USER_NAME }}"
                      },
                      "Action": [
                          "s3:ListBucket",
                          "s3:GetBucketLocation"
                      ],
                      "Resource": "arn:aws:s3:::${BUCKET_NAME}"
                  },
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": "${{ secrets.S3_DEPLOY_USER_NAME }}"
                      },
                      "Action": [
                          "s3:GetObject",
                          "s3:DeleteObject",
                          "s3:PutObject"
                      ],
                      "Resource": "arn:aws:s3:::${BUCKET_NAME}/*"
                  },
                  {
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": "arn:aws:s3:::${BUCKET_NAME}/*"
                  }
              ]
          }
          __EOF__
          echo "Destroying previously created bucket"
          # `aws s3 rb` only works if versioning is NOT enabled
          # https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-or-empty-bucket.html#delete-bucket-awscli
          aws s3 rb "s3://${BUCKET_NAME}" --force || true
          echo "Creating S3 bucket: ${BUCKET_NAME}"
          aws s3api create-bucket \
            --bucket "${BUCKET_NAME}" \
            --create-bucket-configuration LocationConstraint="${AWS_REGION}" \
            --acl "public-read"
          # create bucket policy
          echo "Applying bucket policy"
          aws s3api put-bucket-policy \
            --bucket "${BUCKET_NAME}" \
            --policy file://./policy.json
          echo "Applied"

          CHANGED_FILES="${{ steps.file_changes.outputs.files_added }}"
          #"
          CHANGED_FILES="${CHANGED_FILES} ${{ steps.file_changes.outputs.files_modified }}"
          #"

          # upload the modified files and created video files
          for F in ${CHANGED_FILES}; do
            first_dir=`echo ${F} | cut -d'/' -f1`
            if [ $first_dir != "video" ]; then
              continue
            fi
            SRC=`dirname ${F}`
            DEST="s3://${BUCKET_NAME}/${SRC}"
            echo "Syncing from ${SRC} to ${DEST}"
            aws s3 sync "${SRC}" "${DEST}" --delete
          done
          # https://my-bucket.s3.us-west-2.amazonaws.com
          BASE_URL="https://${BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com"
          CHANGED_VIDEO_DIRS=""
          for F in ${CHANGED_FILES}; do
            first_dir=`echo ${F} | cut -d'/' -f1`
            if [ $first_dir != "video" ]; then
              continue
            fi
            CHANGED_VIDEO_DIRS="${CHANGED_VIDEO_DIRS} `dirname ${F}`"
          done

          URLS=""
          for D in ${CHANGED_VIDEO_DIRS}; do
            for L in in en ja; do
              URLS="- [${L}.mp4](${BASE_URL}/${D}/${L}.mp4)\n ${URLS}"
            done
          done
          echo "::set-output name=URLS::${URLS}"

      - name: Add a comment to PR
        env:
          COMMENT_URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          URLS: ${{ steps.upload_s3.outputs.URLS }}
        run: |
          cat <<__EOF__ | tee comment.json
          {
            "body": "${URLS}"
          }
          __EOF__
          echo "Comment URL: ${COMMENT_URL}"
          cat comment.json
          curl --verbose \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            --data @comment.json \
            "${COMMENT_URL}"

  destroy_s3_bucket:
    name: Destroy the bucket upon closed
    runs-on: ubuntu-latest
    if: github.event.pull_request.closed == true
    steps:
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # SIN
          aws-region: ap-southeast-1

      - name: Destroy S3 bucket for the PR
        run: |
          BUCKET_NAME=`echo "${{ github.repository_owner }}-${{ github.repository }}-${{github.event.pull_request.number}}" | sed -e 's/[^a-zA-Z0-9-]+/-/g'`
          echo "Destroying S3 bucket: `${BUCKET_NAME}`"
          # `aws s3 rb` only works if versioning is NOT enabled
          # https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-or-empty-bucket.html#delete-bucket-awscli
          aws s3 rb "s3://${BUCKET_NAME}" --force
